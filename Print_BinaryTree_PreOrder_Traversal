                ------------------PreOrder Sequence------------------

class Node {
    int data;
    Node left;
    Node right;
    Node (int data){
        this.data=data;
    }
}
class BinaryTree{
    static int index=-1;
    static Node buildTree(int[] node){
        index++;
        if(node[index]==-1) return null;
        Node newNode=new Node(node[index]);
        newNode.left=buildTree(node);
        newNode.right=buildTree(node);
        return newNode;
    }
}
class Tree{
    //print the Binary Tree
    static void printBinnaryTree(Node rootNode){
        if(rootNode == null){
            return;
        }
        System.out.print(rootNode.data+" ");
        printBinnaryTree(rootNode.left);    //first print left tree node by Recursion
        printBinnaryTree(rootNode.right);   //first print right tree node by Recursion
    }
    public static void main(String[] args) {
        BinaryTree bt=new BinaryTree();
        int[] node={1,2,4,-1,-1,5,-1,-1,3,-1,6,-1,-1};
        Node rootNode =bt.buildTree(node);
        printBinnaryTree(rootNode);
    }
}


            ------------------PreOrder Sequence By Stack------------------

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

class Node{
    int data;
    Node left;
    Node right;
    Node(int data) {
        this.data = data;
    }
}
class BinaryTree{
    static int index=-1;
    static Node buildTree(int[] node){
        index++;
        if(node[index]==-1) return null;
        Node newNode=new Node(node[index]);
        newNode.left=buildTree(node);
        newNode.right=buildTree(node);
        return newNode;
    }
}
class Preorder_By_Stack{
    static List<Integer> al=new ArrayList<>();
    static void preorder(Node rootNode){
        if(rootNode==null) return ;
        Stack<Node> st=new Stack<>();
        st.push(rootNode);
        while(!st.isEmpty()){
            rootNode =st.pop();
            al.add(rootNode.data);
            if (rootNode.right!=null) st.push(rootNode.right);
            if(rootNode.left!=null) st.push(rootNode.left);
        }
    }
    public static void main(String[] args) {
        BinaryTree bt=new BinaryTree();
        int[] node={1,2,4,8,-1,-1,-1,5,9,-1,-1,10,-1,-1,3,6,-1,11,-1,-1,7,-1,12,-1,-1};
        Node rootNode=bt.buildTree(node);
        preorder(rootNode);
        for(Integer e:al){
            System.out.print(e+" ");
        }
    }
}
